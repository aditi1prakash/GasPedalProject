
/*
 * Filename: sc_gpio_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */

#ifndef _H_DEFINE_SC_GPIO_TYPE
#define _H_DEFINE_SC_GPIO_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_GPIO_INCLUDES */

/* USER CODE END SC_GPIO_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_GPIO signal    
 **********************************************************************/

/* USER CODE START SC_GPIO_USERDEFINITIONS */

/* USER CODE END SC_GPIO_USERDEFINITIONS */

typedef 
/* USER CODE START SC_GPIO_SIGNALDATADEFINITION */
struct
{
	uint8_t brakeLight;
} 
/* USER CODE END SC_GPIO_SIGNALDATADEFINITION */
SC_GPIO_data_t;

/* USER CODE START InitSC_GPIO */
//#error "Provide a sensible init value"
#define SC_GPIO_INIT_DATA ((SC_GPIO_data_t){0})
/* USER CODE END InitSC_GPIO */




/**
 * Default OUT driver API
 * \param const SC_GPIO_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_GPIO_driverOut(const SC_GPIO_data_t  *const data);


/* USER CODE START SC_GPIO_USERFUNCTIONS */

/* USER CODE END SC_GPIO_USERFUNCTIONS */


#endif